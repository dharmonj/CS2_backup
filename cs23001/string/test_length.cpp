//  String class test program
//
//  Name:  Donald Harmon
//  Tests: length, uses constructors and == 
//

#include "string.hpp"
#include <cassert>
#include <iostream>

//===========================================================================
int main () {

	{
		// SETUP FIXTURE
		String str;

		// TEST 
		assert(str == '\0');
		assert(str.length() == 0);
		assert(str.length() == str.capacity());

		// VERIFY
		std::cout << str.length() << " == " << "0" << std::endl;
	}	

	{
		// SETUP FIXTURE
		String str('\n');

		// TEST
		assert(str == '\n');
		assert(str.length() == 1);
		assert(str.length() == str.capacity());

		// VERIFY
		std::cout << str.length() << " == " << "1" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("123456789");

		// TEST 
		assert(str == "123456789");
		assert(str.length() == 9);
		assert(str.length() == str.capacity());

		// VERIFY
		std::cout << str.length() << " == " << "9" << std::endl;
	}	

	{
		// SETUP FIXTURE
		String str("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasd");

		// TEST
		assert(str == "asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasd");	
		assert(str.length() == 255);
		assert(str.length() == str.capacity());

		// VERIFY
		std::cout << str.length() << " == " << "255" << std::endl;
	}

	{
		// SETUP FIXTURE
		String strt\r\n");
		
		// TEST
		assert(strt\r\n");
		assert(str.length() == 1500);
		assert(str.length() == str.capacity());

		// Verify
		std::cout << str.length() << " == " << "1500" << std::endl;
	}

	std::cout << "Done testing length" << std::endl;


}