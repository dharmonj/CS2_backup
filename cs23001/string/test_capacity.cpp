//  String class test program
//
//  Name:  Donald Harmon
//  Tests: capacity, uses constructors and == 
//

#include "string.hpp"
#include <cassert>
#include <iostream>

//===========================================================================
int main () {

	{
		// SETUP FIXTURE
		String str;

		// TEST 
		assert(str == '\0');
		assert(str.capacity() == 0);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "0" << std::endl;
	}	

	{
		// SETUP FIXTURE
		String str('%');

		// TEST
		assert(str == '%');
		assert(str.capacity() == 1);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "1" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("i need more coffee");

		// TEST 
		assert(str == "i need more coffee");
		assert(str.capacity() == 18);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "18" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("123456789");

		// TEST 
		assert(str == "123456789");
		assert(str.capacity() == 9);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "9" << std::endl;
	}	

	{
		// SETUP FIXTURE
		String str("no seriously, it's 2:36 AM, I need more coffee");

		// TEST 
		assert(str == "no seriously, it's 2:36 AM, I need more coffee");
		assert(str.capacity() == 46);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "46" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("00000");

		// TEST 
		assert(str == "00000");
		assert(str.capacity() == 5);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "5" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasd");

		// TEST
		assert(str == "asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasd");	
		assert(str.capacity() == 255);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "255" << std::endl;
	}

	{
		// SETUP FIXTURE
		String str("01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
		
		// TEST
		assert(str == "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
		assert(str.capacity() == 500);
		assert(str.capacity() == str.length());

		// VERIFY
		std::cout << str.capacity() << " == " << "500" << std::endl;
	}

	{
		String str("01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");

		// LONG LONG TEST
		assert(str == "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789");
		assert(str.capacity() == 2000);
		assert(str.length() == 2000);
	}

	std::cout << "Done testing capacity" << std::endl;


}

